#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('proyectopostgis:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5858');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Connection to database.
 */
var pg = require('pg');
var conString = "microservicio://compara:compara123@localhost/microservicio";

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function(){
  
  var client = new pg.Client(conString);
  client.connect();

  const fetch = require("node-fetch");
  const dolar_today =
  "http://api.sbif.cl/api-sbifv3/recursos_api/dolar?apikey=2a5a92298fecf09c1472b9e657b5e856709303fe&formato=json";
  

  fetch(dolar_today)
  .then(response => {
    response.json().then(json => {

      var value = json.Dolares[0].Valor;
      var date = json.Dolares[0].Fecha;
      client.query('INSERT into dolar_value (value, date) VALUES($1, $2)', [value, date]);
      var hoy = new Date().toJSON().slice(0,10);
      console.log(hoy);
    });
  })
  .catch(error => {
    console.log(error);
  });
  
  console.log("Servidor de MoneyApp estÃ¡ listo en " + this.address().port);

});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
